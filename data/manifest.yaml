postgres:
  databases:
    - name: core
      description: |
        The core database is a place where common tooling and database management
        facilities for datacollectors are stored.  For example, the toolkit, central config,
        job management, exceptions and event logging are all part of the core database.

      from_template: template0
      template: false
      enabled: true
      schemas:

        - name: version
          description: |
            The core.version schema allows for version tracking used to facilitate
            database schema maintenance.  The manifest defines the entire sources
            set for a given database schema, but once run, a given source will never
            execute again.  Further, this allows hash-based file change tracking to
            detect and fail of known (and run) schema sources have changed.  This
            helps guarantee the schema is re-deployable without errors.

          enabled: true
          sources:
            - enabled: true
              file: data/postgresql/core/version/bootstrap.sql
              description: |
                The bootstrap SQL file must be a self-contained single file capable of
                creating everything we need to register versions, including itself after
                completion.  This absolutely must be the first script executed to create
                the database schema.

        - name: exception
          description: |
            This schema defines functions and stored procedures used to raise common
            exceptions.  For example exception.block_inserts() will raise a common 
            'INSERT_BLOCKED' exception which can be reused throughout the project schema.
          enabled: true
          sources:
            - enabled: true
              file: data/postgresql/core/exception/block.inserts.sql
              description: |
                creates the INSERT_BLOCKED exception for tables which are read-only or
                write-once, read-many.

            - enabled: true
              file: data/postgresql/core/exception/block.updates.sql
              description: creates teh UPDATE_BLOCKED exception for tables which are write-once, read many.

        - name: toolkit
          description: |
            The schema defines functions and stored procedures that make SQL programming
            easier.  The goal is to create wrapper functions/procedures for creating common
            SQL structures or for performing operations in a consistent manner with less actual
            effort.  This also ensures data sanitization, naming conventions and other safeguards
            are built into our database schema through the toolkit rather than ad-hoc.
          enabled: true
          sources:
            - enabled: true
              file: data/postgresql/core/toolkit/tasks/uuid.sql
              description: Load support for UUIDs.

            - enabled: true
              file: data/postgresql/core/toolkit/functions/getLatestTime.sql
              description: |
                toolkit.getLatestTime(<tbl>, <col>) returns the latest timestamp in the column and table
                passed as input.

            - enabled: true
              file: data/postgresql/core/toolkit/functions/hash.sql
              description: |
                Given a string (s), toolkit.hash(s) will return the hex-encoded sha256 hash of s.

            - enabled: true
              file: data/postgresql/core/toolkit/procedures/assert.sql
              description: Provides an assertion mechanism

            - enabled: true
              file: data/postgresql/core/toolkit/procedures/create_enum.sql
              description: |
                Provides toolkit.create_enum() to create enumerated types using an array of varchar input. This
                guarantees the enum is created consistently and if the enumerated type already exists, the 
                procedure will raise a notice rather than a fatal error, similar to an "if not exists" clause.

            - enabled: true
              file: data/postgresql/core/toolkit/procedures/addCheckConstraint.sql
              description: |
                Given a table name, a logical check name and a string describing a boolean function call,
                this procedure creates a check constraint on the given table which will execute the check
                function as described to ensure that the table meets the expectations defined in the 
                check function.

            - enabled: true
              file: data/postgresql/core/toolkit/procedures/deleteCheckConstraint.sql
              description: |
                toolkit.deleteCheckConstraint() will remove any constraint added using toolkit.addCheckConstraint().

            - enabled: true
              file: data/postgresql/core/toolkit/functions/callCheckFunc.sql
              description: |
                Provides toolkit.callCheckFunc() which will create the function call string based on the standard
                call pattern.  The returned function call string can be passed to toolkit.addCheckConstraint() as
                the check function which will be invoked each for a given check.

            - enabled: true
              file: data/postgresql/core/toolkit/procedures/create_sequence.sql
              description: Provides toolkit.create_sequence() to create sequence types

            - enabled: true
              file: data/postgresql/core/toolkit/procedures/create_index.sql
              description: |
                Provides toolkit.create_index() to create an index against one or more columns
                with or without a uniqueness constraint.

            - enabled: true
              file: data/postgresql/core/toolkit/procedures/delete_index.sql
              description: |
                Provides toolkit.delete_index() to delete an existing index safely if it exists.

            - enabled: true
              file: data/postgresql/core/toolkit/functions/isTimestampFuture.sql
              description: |
                Given a timestamp (thisTime), table name and column name (where the column is a timestamp),
                this function (isTimestampFuture() will return true if thisTime is later than all times in the
                given table or false otherwise.

            - enabled: true
              file: data/postgresql/core/toolkit/functions/isUpdatedAfterCreated.sql
              description: |
                Given a table name and the name of its updated timestamp column along with a created timestamp
                value, return true if the created timestamp is greater than or equal to the latestTime timestamp.
                Otherwise, return false.

            - enabled: true
              file: data/postgresql/core/toolkit/procedures/create_trigger.sql
              description: |
                Provides a toolkit.create_trigger procedure to create a trigger on a given database, table
                and operation (e.g. INSERT, UPDATE, DELETE).

            - enabled: true
              file: data/postgresql/core/toolkit/procedures/delete_trigger.sql
              description: toolkit.delete_trigger() will lookup and delete any matching trigger.

            - enabled: true
              file: data/postgresql/core/toolkit/procedures/delete_type.sql
              description: |
                toolkit.delete_type() will delete an enum or other user-defined type
                if it exists.

            - enabled: true
              file: data/postgresql/core/toolkit/procedures/block_inserts.sql
              description: |
                toolkit.block_inserts() will create a trigger on a given table to 
                block any INSERT operation.

            - enabled: true
              file: data/postgresql/core/toolkit/procedures/disable_updates.sql
              description: |
                toolkit.disable_updates() will create a trigger on a given table to
                block any UPDATE operation.  This results in the table being write-
                once, read-many (WORM)

            - enabled: true
              file: data/postgresql/core/toolkit/procedures/enable_updates.sql
              description: |
                toolkit.enable_updates() will delete any existing trigger created by
                toolkit.disable_updates() and allow UPDATE operations to succeed.

            - enabled: true
              file: data/postgresql/core/toolkit/procedures/allow_inserts.sql
              description: |
                toolkit.allow_inserts() will delete any trigger created by block_inserts()
                and thereby allow INSERT operations on the given table.

        - name: config
          description: |
            The config schema defines a centralized store for configuration parameters within
            the database.  Initially this is a simple key-value store with a get() and set(), 
            but the plan here is to extend the config schema to support expiring key-value
            records as well as to support encrypted key-value records where the symmetric
            encryption keys are kept in the caller and the
          enabled: true
          sources:

            - enabled: true
              file: data/postgresql/core/config/tasks/config.class.sql
              description: |
                config.class is an enumerated data type used to segment config.data rows into
                their storage class (e.g. clear text or encrypted).  This value will
                determine which config.* methods can be used to get/set values.

            - enabled: true
              file: data/postgresql/core/config/tables/config.data.sql
              description: |
                This table contains our key-value configuration data.
              todo: |
                1. Implement a timer or trigger to expire records.
                2. Implement encrypted records

            - enabled: true
              file: data/postgresql/core/config/tables/expiration.sql
              description: |
                This table identifies any expiration rules for key-value records in config.data.
                If a record exists in config.expiration for a key in config.data, then it will be
                expired some time approximately on or after the expiration

            - enabled: true
              file: data/postgresql/core/config/procedures/set.expiration.sql
              description: |
                config.setExpiration() will insert a row into config.expiration.

            - enabled: true
              file: data/postgresql/core/config/procedures/delete.expiration.sql
              description: |
                config.deleteExpiration() will delete a row from config.expiration.

            - enabled: true
              file: data/postgresql/core/config/functions/get.sql
              description: config.get() will return the cleartext value associated with a given key.
              todo: |
                1. for encrypted values, get() should throw exception.
                2. for non-existent values, get() should throw an exception

            - enabled: true
              file: data/postgresql/core/config/functions/set.text.sql
              description: config.set(<key>, <value>) will set a cleartext value for a given key.
              todo: |
                1. for encrypted values, get() should throw exception.
                2. for non-existent values, get() should throw an exception

            - enabled: true
              file: data/postgresql/core/config/functions/set.boolean.sql
              description: |
                config.set(<key>, <bool>) will set a cleartext value for a given key with a boolean value.
              todo: |
                1. for encrypted values, get() should throw exception.
                2. for non-existent values, get() should throw an exception

            - enabled: true
              file: data/postgresql/core/config/functions/set.decimal.sql
              description: |
                config.set(<key>, <decimal>) will set a cleartext value for a given key with a decimal value.
              todo: |
                1. for encrypted values, get() should throw exception.
                2. for non-existent values, get() should throw an exception

            - enabled: true
              file: data/postgresql/core/config/functions/set.integer.sql
              description: |
                config.set(<key>, <integer>) will set a cleartext value for a given key with an integer value.
              todo: |
                1. for encrypted values, get() should throw exception.
                2. for non-existent values, get() should throw an exception

            - enabled: true
              file: data/postgresql/core/config/functions/set.timestamp.sql
              description: |
                config.set(<key>, <timestamp>) will set a cleartext value for a given key with a timestamp value.
              todo: |
                1. for encrypted values, get() should throw exception.
                2. for non-existent values, get() should throw an exception

            - enabled: true
              file: data/postgresql/core/config/tasks/initial.configuration.sql
              description: |
                This task will create the default configuration values.

        - name: log
          description: |
            This schema stores log events for the project database and provides functions
            and stored procedures for interacting with the log event data.
          enabled: true
          sources:
            - enabled: true
              file: data/postgresql/core/log/0000.schema.sql
            - enabled: true
              file: data/postgresql/core/log/0100.enum.severity.sql
            - enabled: true
              file: data/postgresql/core/log/0150.table.keys.sql
            - enabled: true
              file: data/postgresql/core/log/0150.table.tags.sql
            - enabled: true
              file: data/postgresql/core/log/0170.func.list.tag.ids.sql
            - enabled: true
              file: data/postgresql/core/log/0170.func.list.tags.sql
            - enabled: true
              file: data/postgresql/core/log/0180.func.get.tag.set.id.sql
            - enabled: true
              file: data/postgresql/core/log/0180.func.tags.valid.sql
            - enabled: true
              file: data/postgresql/core/log/0182.func.validate.tags.sql
            - enabled: true
              file: data/postgresql/core/log/0183.func.tag.in.tags.sql
            - enabled: true
              file: data/postgresql/core/log/0185.func.tagsReadOnly.sql
            - enabled: true
              file: data/postgresql/core/log/0185.func.tagsReadWrite.sql
            - enabled: true
              file: data/postgresql/core/log/0190.alter.table.tags.read.only.sql
            - enabled: true
              file: data/postgresql/core/log/0190.func.addTag.sql
            - enabled: true
              file: data/postgresql/core/log/0190.table.events.sql
            - enabled: true
              file: data/postgresql/core/log/0300.func.job.log.critical.sql
            - enabled: true
              file: data/postgresql/core/log/0300.func.job.log.debug.sql
            - enabled: true
              file: data/postgresql/core/log/0300.func.job.log.error.sql
            - enabled: true
              file: data/postgresql/core/log/0300.func.job.log.info.sql
            - enabled: true
              file: data/postgresql/core/log/0300.func.job.log.sql
            - enabled: true
              file: data/postgresql/core/log/0400.data.add.default.tags.env.dev.sql
            - enabled: true
              file: data/postgresql/core/log/0400.data.add.default.tags.env.stage.sql
            - enabled: true
              file: data/postgresql/core/log/0400.data.add.default.tags.env.prod.sql
            - enabled: true
              file: >-
                data/postgresql/core/log/0400.data.add.default.tags.svc.datacollectors.sql
            - enabled: true
              file: >-
                data/postgresql/core/log/0400.data.add.default.tags.svc.kubernetes.sql
            - enabled: true
              file: data/postgresql/core/log/0400.data.add.default.tags.svc.kafka.sql

        - name: job
          description: |
            The core.job schema organizes job execution for the datacollectors project.  This
            schema includes the data and tooling needed to create, plan, schedule and execute
            datacollector jobs over time.  The goal of this schema is to evolve to provide a
            self-managing and sustainable data collector job manager with reliability in mind.
          enabled: true
          sources:
            - enabled: true
              file: data/postgresql/core/job/0000.schema.sql
            - enabled: true
              file: data/postgresql/core/job/0100.enum.job.status.sql
            - enabled: true
              file: data/postgresql/core/job/0150.func.validate.tags.sql
            - enabled: true
              file: data/postgresql/core/job/0200.table.job.schedule.sql
            - enabled: true
              file: data/postgresql/core/job/0210.table.job.history.sql
            - enabled: true
              file: data/postgresql/core/job/0220.table.job.queue.sql
            - enabled: true
              file: data/postgresql/core/job/0220.table.job.runners.sql
            - enabled: true
              file: data/postgresql/core/job/0230.table.job.tasks.sql
            - enabled: false
              file: data/postgresql/core/job/0300.func.job.queue.pop.sql
            - enabled: false
              file: data/postgresql/core/job/0300.func.job.queue.push.sql

#    - name: financial
#      description: |
#        The financial database is a database for collecting data related to the financial
#        markets.  This OSINT datacollector will persist financial market data overtime for
#        analysis and decision making eventually.
#      from_template: core
#      template: false
#      enabled: false
#      schemas:
#
#        - name: stock
#          description: |
#            The financial.stock schema is used to collect stock market data.
#          enabled: false
#          sources:
#            - enabled: false
#              file: data/postgresql/financial/stock/0000.schema.sql
#
#    - name: general
#      description: |
#        The general database is for any datacollector which cannot be easily classified.
#      from_template: core
#      template: false
#      enabled: false
#
#    - name: intelligence
#      description: |
#        The intelligence database is for surveillance feeds from the physical world,
#        including various SIGINT sources such as WIFI SSIDs, BSSIDs, bluetooth devices,
#        cellular IMSI and TMSI data, and so on.  If it can be discovered, this database
#        should be extensible enough to collect it for analysis.
#      from_template: core
#      template: false
#      enabled: false
#
#    - name: policy
#      description: |
#        The policy database is for collecting political policy related data such as
#        criminal justice data which can be used for analysis and decision making.
#      from_template: core
#      template: false
#      enabled: false
#      schemas:
#        sources:
#          - enabled: true
#            file: data/postgresql/policy/tdcj_inmates/0000.bootstrap.sql
