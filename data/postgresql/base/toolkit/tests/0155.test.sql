-- /*
--  * test the delete_trigger() function works without errors.
--  */
-- create or replace procedure toolkit.test_delete_trigger() as
-- $$
-- declare
--     c           integer := 0;
--     tbl_name    varchar := 'test_table';
--     op          varchar := 'insert';
--     action_func varchar := 'noop_func';
--     tgr_name    varchar := format('trigger_%s_%s_%s', replace(tbl_name, '.', '_'), op, 'noop_func');
--
-- begin
--     create table if not exists test_table
--     (
--         a varchar not null
--     );
--     create or replace function noop_func() returns trigger as
--     $F$
--     begin
--         return new;
--     end
--     $F$ language plpgsql;
--
--     call toolkit.create_trigger(tbl_name, op, action_func);
--     call toolkit.delete_trigger(tbl_name, op, action_func);
--     c := (select count(*) from information_schema.triggers where trigger_name = tgr_name);
--     raise notice 'count: %',c;
--     if c <> 0 then
--         raise exception 'delete_trigger() did not delete the trigger';
--     end if;
--     --clean-up
--     drop procedure toolkit.test_delete_trigger;
-- end
-- $$ language plpgsql;
-- /*
--  *  ------------------------------------------------------------------------------
--  *  Running tests
--  *     All unit tests should be above this section
--  *  ------------------------------------------------------------------------------
--  */
-- do
-- $$
--     begin
--         raise notice 'test: test_create_trigger() starting';
--         call toolkit.test_delete_trigger();
--         rollback;
--     end
-- $$ language plpgsql;
