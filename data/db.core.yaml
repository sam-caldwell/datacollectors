---
database:
  description: |
    The core database is used to store version-control data, job-management
    data, event logs and other information fundamental to the data collector
    operation.  This database is exposed by foreign schema to the other
    databases in the system, and its functions and stored procedures even
    access its own data through toolkit-schema facilities over the foreign
    schema connections.  This is done to balance the need for database
    performance with a symmetry of design, where other databases must use
    the toolkit facilities to record log events or to access the central
    configuration store.
  from_template: template0
  template: true
  schema:
    - name: config
      enabled: false
      description: |
        The config schema defines a centralized store for configuration
        parameters within the database.  Initially this is a simple
        key-value store with a get() and set(), but the plan here is to
        extend the config schema to support expiring key-value records as
        well as to support encrypted key-value records where the symmetric
        encryption keys are kept in the caller.

        This schema is exposed for access by other databases in the system.
        Thus, the functions and stored procedures defined here must also
        access the config data tables through the foreign schema connections.

      tables:
        - name: config.data
          enabled: false
          description: |
            The config.data table contains our key-value data.
          columns:
            - name: id
              type: serial
              primary_key: true
              null: false

            - name: key
              type: varchar(255)
              null: false  # not null
              unique: true

            - name: value
              type: text
              null: false
              default: ''

            - name: encrypted
              type: boolean
              null: false
              default: false  # defaults to cleartext

            - name: created
              type: timestamp
              null: false
              default: now()

            - name: updated
              type: timestamp
              null: true
              default: null

          constraints:
            - name: check_key_pattern
              type: check
              value: key ~ '[a-zA-Z_]([\.\-\_]{0,1}[a-zA-Z0-9]+)+'

          restrictions:
            allow_updates: true
            allow_inserts: true
          indexes:
            - name: ndx_created
              unique: false
              columns:
                - created
            - name: ndx_updated
              unique: false
              columns:
                - updated
          #
          # Insert initial data rows into the config.data table...
          #
          insert:
            - key: 'db.log.severity'
              value: 'info'
              encrypted: false

            - key: 'db.config.initialized'
              value: format('%s',now())
              encrypted: false

        - name: config.expiration
          enabled: false
          description: |
            This table identifies any expiration rules for key-value records
            in config.data. If a record exists in config.expiration for a
            key in config.data, then it will be expired some time
            approximately on or after the expiration.
          columns:
            - name: id
              type: integer
              null: false
              primary_key: true
              references: config.data(key)

            - name: expiration
              type: timestamp
              null: false

            - name: created
              type: timestamp
              null: false
              default: now()

          allow_updates: false
          allow_inserts: true
          constraints:
            - name: future_created
              type: check
              value: |
                created > toolkit.getLatestTime('config.expiration',
                  'created'))

        functions:

        procedures:
        - name: config.set_expiration
          enabled: true
          file: data/postgresql/core/config/procedures/set.expiration.sql
          description: |
            config.setExpiration() will insert a row into config.expiration.

        - enabled: true
          file: data/postgresql/core/config/procedures/delete.expiration.sql
          description: |
            config.deleteExpiration() will delete a row from config.expiration.

        - enabled: true
          file: data/postgresql/core/config/functions/get.sql
          description: config.get() will return the cleartext value associated with a given key.
          todo: |
            1. for encrypted values, get() should throw exception.
            2. for non-existent values, get() should throw an exception

        - enabled: true
          file: data/postgresql/core/config/functions/set.text.sql
          description: config.set(<key>, <value>) will set a cleartext value for a given key.
          todo: |
            1. for encrypted values, get() should throw exception.
            2. for non-existent values, get() should throw an exception

        - enabled: true
          file: data/postgresql/core/config/functions/set.boolean.sql
          description: |
            config.set(<key>, <bool>) will set a cleartext value for a given key with a boolean value.
          todo: |
            1. for encrypted values, get() should throw exception.
            2. for non-existent values, get() should throw an exception

        - enabled: true
          file: data/postgresql/core/config/functions/set.decimal.sql
          description: |
            config.set(<key>, <decimal>) will set a cleartext value for a given key with a decimal value.
          todo: |
            1. for encrypted values, get() should throw exception.
            2. for non-existent values, get() should throw an exception

        - enabled: true
          file: data/postgresql/core/config/functions/set.integer.sql
          description: |
            config.set(<key>, <integer>) will set a cleartext value for a given key with an integer value.
          todo: |
            1. for encrypted values, get() should throw exception.
            2. for non-existent values, get() should throw an exception

        - enabled: true
          file: data/postgresql/core/config/functions/set.timestamp.sql
          description: |
            config.set(<key>, <timestamp>) will set a cleartext value for a given key with a timestamp value.
          todo: |
            1. for encrypted values, get() should throw exception.
            2. for non-existent values, get() should throw an exception

        - enabled: true
          file: data/postgresql/core/config/tasks/initial.configuration.sql
          description: |
            This task will create the default configuration values.


    - name: version
      enabled: false
      description: |
        The core.version schema allows for version tracking used to
        facilitate database schema maintenance.  The manifest defines
        the entire sources set for a given database schema, but once
        run, a given source will never execute again. Further, this
        allows hash-based file change tracking to detect and fail of
        known (and run) schema sources have changed.  This helps
        guarantee the schema is re-deployable without errors.

        This schema is accessible only within the core database.

      tables:
        - name: version.filenames
          enabled: false
          description: |
            The version.filenames
          columns:
            - name: id
              type: serial
              null: false
              primary_key: true
            - name: name
              type: varchar
              null: false
              unique: true
            - name: created
              type: timestamp
              null: false
              default: now()
          restrictions:
            allow_updates: false
            allow_inserts: true
          indexes:

        - name: log
          description: |
            This schema stores log events for the project database and provides functions
            and stored procedures for interacting with the log event data.

            This schema is exposed for access by other databases in the system.  Thus, the 
            functions and stored procedures defined here must also access the config data
            tables through the foreign schema connections.

          enabled: true
          sources:
            - enabled: true
              file: data/postgresql/core/log/tasks/severity.sql
              description: |
                Create the event severity enumerated type.

            - enabled: true
              file: data/postgresql/core/log/tables/keys.sql
              description: |
                Create the keys table.

            - enabled: true
              file: data/postgresql/core/log/procedures/tagsReadOnly.sql
              description: |
                log.tagsReadOnly() uses toolkit.block_inserts() to make the tags table readonly.
                This means that in the system tags should be pre-registered using log.addTag()
                to minimize the number of log.events records which just contain noise.  We want
                our code to keep our event data clean not act like a bunch of hipster javascript
                web developers.

            - enabled: true
              file: data/postgresql/core/log/procedures/tagsReadWrite.sql
              description: |
                log.tagsReadWrite() turns off the default readonly restriction on the tags table
                to allow new tags to be added.  This is intended to be used by log.addTag() and
                should be an exceptional use case to keep our tags table clean.

            - enabled: true
              file: data/postgresql/core/log/tables/tags.sql
              description: |
                implement the tags table.

            - enabled: true
              file: data/postgresql/core/log/functions/listTagIds.sql
              description: |
                log.listTagIds() will accept an optional limit and offset integer and return an array of 
                integers from that offset using that limit (record count), where the returned array is a
                subset of all tag ids in log.tags table.

            - enabled: true
              file: data/postgresql/core/log/functions/listTags.sql
              description: |
                log.listTags() will accept an optional limit and offset integer and return an array of 
                varchar (strings) from that offset using that limit (record count), where the returned array is a
                subset of all tags (tag keys) in log.tags table.

            - enabled: true
              file: data/postgresql/core/log/functions/getTagSetId.sql
              description: |
                log.getTagSetId() will return a list of tag ids (integers) associated with a given array of
                tags (strings).  Thus, we can pass the set ARRAY[''env:dev'', ''env:prod''] to this function and
                get ARRAY[1,2] in response where ''env:dev'' is id:1 and ''env:prod'' is id:2.

            - enabled: true
              file: data/postgresql/core/log/functions/tagsValid.sql
              description: |
                log.tagsValid() takes an array of tags as input and validates that all elements in the array are in
                the log.tags table.

            - enabled: true
              file: data/postgresql/core/log/functions/validateTags.sql
              description: |
                log.validateTags() provides tag validation trigger functionality.

            - enabled: true
              file: data/postgresql/core/log/functions/tagInTags.sql
              description: |
                log.tagsInTags() accepts an array of tag ids.

            - enabled: true
              file: data/postgresql/core/log/procedures/addTag.sql
              description: |
                log.addTag() inserts a new (validated) tag into the log.tags table.

            - enabled: true
              file: data/postgresql/core/log/tables/events.sql
              description: |
                log.events is a table for collecting event data in our database.  These events
                are intended to be highly structured descriptors (not fucking logs!) aimed at
                ensuring observability of the datacollectors system.
              todo: |
                1. Enrich the events system with external references where needed to give additional context.
                2. We need to add alerting mechanisms and thresholds to establish SLOs on our events.

            - enabled: true
              file: data/postgresql/core/log/procedures/critical.sql
              description: |
                log.critical() is a function for writing critical severity events.

            - enabled: true
              file: data/postgresql/core/log/procedures/debug.sql

            - enabled: true
              file: data/postgresql/core/log/procedures/error.sql

            - enabled: true
              file: data/postgresql/core/log/procedures/info.sql

            - enabled: true
              file: data/postgresql/core/log/procedures/log.sql

            - enabled: true
              file: data/postgresql/core/log/tasks/default.tags.env.dev.sql

            - enabled: true
              file: data/postgresql/core/log/tasks/default.tags.env.stage.sql

            - enabled: true
              file: data/postgresql/core/log/tasks/default.tags.env.prod.sql

            - enabled: true
              file: data/postgresql/core/log/tasks/default.tags.svc.datacollectors.sql

            - enabled: true
              file: >-
                data/postgresql/core/log/tasks/default.tags.svc.kubernetes.sql

            - enabled: true
              file: data/postgresql/core/log/tasks/default.tags.svc.kafka.sql

        - name: job
          description: |
            The core.job schema organizes job execution for the datacollectors project.  This
            schema includes the data and tooling needed to create, plan, schedule and execute
            datacollector jobs over time.  The goal of this schema is to evolve to provide a
            self-managing and sustainable data collector job manager with reliability in mind.
            
            In the datacollectors a "job" is a workflow definition consisting of one or more
            tasks, where a "task" is the smallest atomic unit of work representing a definition
            of input parameters, expected outputs and a container-based unit of automation called
            a "runner."
            
            This schema is accessible only within the core database.

          enabled: true
          sources:
            - enabled: true
              file: data/postgresql/core/job/tasks/status.sql
              description: |
                The job status enumerated type defines where in the workflow the job is.
                We see the simple choices here: a job is either not_started or it is in_progress as
                valid workflow states.  The only other option is "disabled." to prevent evaluation
                by the job scheduler.

            - enabled: true
              file: data/postgresql/core/job/functions/validateTags.sql
              description: |
                job.validateTags() is a trigger function which will validate that the tags
                within the associated job tables are valid tags in the log.tags table.

            - enabled: true
              file: data/postgresql/core/job/tables/job.schedule.sql
              description: |
                The job.schedule table defines a "job" the top level object of the workflow.  Here, we give the job
                a logical name, map it to an Id (integer) we can reference elsewhere, and define the job status,
                execution frequency (interval) and tags.  We allow a job to be updated, and we guarantee that our 
                timestamps are proper (e.g. not backdated) using constraints.
                
                Notes:
                  0. Status is an enumerated type
                  1. Frequency is an integer (4 bytes) rather than interval (16 bytes) to conserve space since no
                     job should execute less than once a year.  Almost all jobs will execute much more frequently.
                  2. tags are mapped to the log.tags table to keep log.events and job.* consistent.  We do this 
                     consistency in the database because we are not lazy fucking web developers, and this is not 
                     joomla.
              todo: |
                1. add timestamp validation to ensure created timestamps move into the future always.
                2. add timestamp validation to ensure updated timestamps are always after the latest created timestamp.
                (this is not Enron, integrity matters).

            - enabled: true
              file: data/postgresql/core/job/tables/job.history.sql
              description: |
                The job.history table is used to track job executions.  This is not the same use-case as log.events.
                This table is used to track execution history and execution time for purposes of scheduling future
                job executions.  For example, given the frequency field in the job.schedule table, we can look at the 
                history table to find last execution and calculate from that time the elapsed time to determine which
                jobs need to be queued to jobs.queue.

            - enabled: true
              file: data/postgresql/core/job/tables/job.runners.sql
              description: |
                The job.runners table defines the available automation packages (called "runners") in the system.
                Each record in this table represents a container with specified inputs and outputs.  Each task 
                executes a single runner

            - enabled: true
              file: data/postgresql/core/job/functions/job.idInTasks.sql
              description: |
                The job.idInTasks() function will return a boolean answer.  Given a jobId input (integer) the
                function returns true if the input id is in the job.tasks table.  This is used by a constraint
                check in the job.queue table.

            - enabled: true
              file: data/postgresql/core/job/tables/job.tasks.sql
              description: |
                The tasks table depends on the job.schedule and job.runners tables to define the tasks for a given job
                and map the task to a given runner which will be executed under the task context.

            - enabled: true
              file: data/postgresql/core/job/tables/job.queue.sql
              description: |
                The queue table is where we store a list of jobs that are ready for execution.  Once we push a job
                to the job.queue table, we mark it "in_progress."  If the job execution process fails, the job can
                be restarted from its current state.

            - enabled: false
              file: data/postgresql/core/job/functions/queue.push.sql
              description: |
                job.push(<jobName>) will insert records into job.queue table.  Given a job name (varchar), this
                procedure will insert records for each task in the job into job.queue in the order of execution.
                Execution order is determined by taskId

            - enabled: false
              file: data/postgresql/core/job/functions/queue.pop.sql
              description: |
                job.pop() will return a JSON object describing the row at the current head of the FIFO queue
                (i.e. the one with the lowest queue id value and a null expiration value), updating expiration
                to now().
                
                Once a row in the queue has an expiration, the record can be purged asynchronously later.
